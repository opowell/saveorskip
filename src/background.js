import store from './store';
import * as idb from './store/idb.js';
import * as types from './store/mutation-types.js';
import { trimmedUrl, joinArray } from './Utils.js';

global.browser = require('webextension-polyfill');

/*
 * gotoNext - whether or not to move to a new page after saving.
 **/
async function saveOrSkip(gotoNext, action) {
  console.log('background: saveOrSkip ' + JSON.stringify(action));
  store.state.curPage.profileId = store.state.targetId;
  store.state.curPage.saved = action === 'save';
  // await idb.saveLink(store.state.curPage);
  // let cb = null;
  if (gotoNext === true) {
    // cb = showNextPage;
    showNextPage();
  }
  // saveSourcesOfUrl(store.state.curPage.url, cb, action);
}

// function saveOrSkipLink(gotoNext, action, link) {
//   idb.saveOrSkipLink({
//     link: link,
//     action: action,
//     targetId: store.state.targetId,
//   });
//   let cb = null;
//   if (gotoNext === true) {
//     cb = showNextPage;
//   }
//   saveSourcesOfUrl(link.url, cb, action);
// }

// Save a list of sources to storage.
function saveSources(sourcesToSave, callback) {
  if (sourcesToSave == null) return;
  for (let i in sourcesToSave) {
    sourcesToSave[i].consumerId = store.state.targetId;
    sourcesToSave[i].autoGenerated = true;
  }
  idb.addSources({
    sources: sourcesToSave,
  });
  try {
    callback();
  } catch (err) {
    console.log('callback is not a function.');
  }
}

// function saveSourcesOfTab(tab) {
//   let action = 'save';
//   console.log(action + ' sources of ' + tab.url);

//   // Save sources from open pages that link to this item.
//   chrome.tabs.query({}, function(tabs) {
//     for (let i = 0; i < tabs.length; i++) {
//       if (tabs[i].id === tab.id) {
//         // Check tab itself for sources.
//         console.log('scraping own sources from tabId=' + store.state.activeTabId);
//         chrome.tabs.sendMessage(tab.id, { action: 'getSources', saveOrSkip: action }, function(response) {
//           if (response != null) {
//             for (let j = 0; j < response.sources.length; j++) {
//               if (response.sources[j].url === store.state.sourceForCurUrl) {
//                 response.sources.splice(j, 1);
//               }
//             }
//             saveSources(response.sources);
//           }
//         });
//       }
//       let otherTab = tabs[i];
//       chrome.tabs.sendMessage(otherTab.id, { action: 'getUrlSources', url: tab.url, saveOrSkip: action }, function(response) {
//         if (response == null || response.sources == null) {
//           console.log(otherTab.url + ' returned no sources of ' + tab.url);
//           return;
//         }

//         for (let j = 0; j < response.sources.length; j++) {
//           if (response.sources[j] == store.state.sourceForCurUrl) {
//             response.sources.splice(j, 1);
//           }
//         }
//         saveSources(response.sources);
//       });
//     }
//   });
// }

function saveSourcesOfUrl(url, cb, action) {
  console.log(action + ' sources of ' + url);

  // Save sources from open pages that link to this item.
  chrome.tabs.query({}, function(tabs) {
    for (let i = 0; i < tabs.length; i++) {
      let tab = tabs[i];
      if (trimmedUrl(tab.url) === trimmedUrl(url)) {
        // Check tab itself for sources.
        console.log('scraping own sources from tabId=' + tab.id);
        chrome.tabs.sendMessage(tab.id, { action: 'getSources', saveOrSkip: action }, function(response) {
          if (response != null) {
            for (let j = 0; j < response.sources.length; j++) {
              if (response.sources[j].url === store.state.sourceForCurUrl) {
                response.sources.splice(j, 1);
              }
            }
            saveSources(response.sources, cb);
          } else {
            if (cb != null) {
              try {
                cb();
              } catch (err) {
                console.log('Scraping sources: Error evaluating callback.');
              }
            }
          }
        });
      } else {
        let otherTab = tabs[i];
        chrome.tabs.sendMessage(otherTab.id, { action: 'getUrlSources', url: url, saveOrSkip: action }, function(response) {
          if (response == null || response.sources == null) {
            console.log(otherTab.url + ' returned no sources of ' + url);
            return;
          }

          for (let j = 0; j < response.sources.length; j++) {
            if (response.sources[j] === store.state.sourceForCurUrl) {
              response.sources.splice(j, 1);
            }
          }
          saveSources(response.sources);
        });
      }
    }
  });
}

// Selects a random source, with prob. of selecting source i proportional to source i's points.
function showNextPage(profileId) {
  // If next suggestion already exists, use it and find a new one.
  console.log('show next link');
  if (store.state.nextSuggestion != null) {
    console.log('next suggestion exists');
    changeActiveTabToUrl(store.state.nextSuggestion);
    store.commit(types.SET_CUR_SUGGESTION, {
      url: store.state.nextSuggestion,
    });
    store.commit(types.SET_NEXT_SUGGESTION, {
      url: null,
    });
    store.commit(types.SET_NEED_CUR_SUGGESTION, {
      value: false,
    });
  } else {
    console.log('no next suggestion');
    store.commit(types.SET_NEED_CUR_SUGGESTION, {
      value: true,
    });
  }
  loadNextSuggestion(profileId);
}

function scrapeIfNecessary(source) {
  let now = new Date();
  console.log('comparing now to next scrape date: ' + now + ' vs. ' + source.nextScrape);
  if (source.nextScrape == null || new Date(source.nextScrape) < now) {
    scrapeSource(source.url);
  }
}

async function loadNextSuggestion(profileId) {
  try {
    console.log('Loading next link');
    let sources = await idb.getProfileSources(profileId);
    if (sources == null) {
      console.log('no sources found');
      return;
    }

    while (true) {
      let source = drawRandomElFromObject(sources, scoreFn);
      if (source == null) {
        console.log('error loading suggestion: no source found');
        return;
      }
      scrapeIfNecessary(source);

      console.log('DRAWING SUGGESTION from ' + source.url);
      await idb.dispatchToStores('setSourceForCurUrl', trimmedUrl(source.url));
      let linksCursor = await idb.getLinksByTimeAdded(profileId);
      if (linksCursor == null) {
        console.log('no links, skipping ' + source.url);
        for (let i = 0; i < sources.length; i++) {
          if (sources[i] === source) {
            sources.splice(i, 1);
            break;
          }
        }
        continue;
      }
      let nextUrl = null;
      while (nextUrl === null) {
        // Check if current link already exists on profile.
        let storeLink = await idb.getLink({
          profileId,
          linkId: linksCursor.value.url,
        });
        let alreadyExists = storeLink != null;
        if (!alreadyExists) {
          nextUrl = linksCursor.value.url;
        } else {
          try {
            await idb.deleteLink({
              profileId,
              sourceId: source.url,
              linkId: linksCursor.value.url,
            });
            await linksCursor.continue();
          } catch (err) {
            nextUrl = null;
          }
        }
      }

      if (nextUrl !== null) {
        changeActiveTabToUrl(linksCursor.value.url);
        return;
      }
    }
  } catch (err) {
    console.log(err);
  }
}

chrome.tabs.onActivated.addListener(function(activeInfo) {
  console.log('tab activated: ' + JSON.stringify(activeInfo));
  store.commit(types.SET_ACTIVE_TAB_ID, {
    tabId: activeInfo.tabId,
  });
  chrome.tabs.sendMessage(activeInfo.tabId, { action: 'getLink' }, getLinkCB);
});

chrome.tabs.onUpdated.addListener(async function(tabId, changeInfo, tab) {
  if (tabId === store.state.activeTabId) {
    chrome.tabs.sendMessage(tab.id, { action: 'getLink' }, getLinkCB);
  }
});

async function getLinkCB(link) {
  await idb.setCurPage(link);
  await idb.setSkippedLinkIfNew(store.state.targetId, link);
  await idb.setSkippedSourceIfNew(store.state.targetId, link);
}

chrome.runtime.onMessage.addListener(async function(message, sender, sendResponse) {
  let senderUrl = trimmedUrl(sender.url);
  console.log('message received from ' + senderUrl, message);

  let action = message;
  if (message.action != null) {
    action = message.action;
  }

  switch (action) {
    case 'testPage':
      // store.commit(types.SET_TEST_PAGE_URL, { url: message.url });
      idb.dispatchToStores('setTestPageUrl', {
        url: message.url,
      });
      chrome.tabs.create({ url: 'http://' + message.url, active: false });
      break;
    case 'storeDispatch':
      idb.dispatchToStores(message.storeAction, message.storePayload);
      break;
    case 'saveSourcesOfUrl':
      store.commit(types.SET_URL_TO_SCRAPE, message.url);
      saveSourcesOfUrl(message.url, null, 'save');
      break;
    // case 'openAndScrape':
    //   let url = request.url;
    //   storeDispatch('setUrlToScrape', url);
    //   saveOrSkip(
    //     {
    //       url: request.url,
    //       title: sender.title,
    //     },
    //     false
    //   );
    //   break;
    case 'getPage':
      console.log('testPage: ' + store.state.testPageUrl + ' vs. senderUrl = ' + senderUrl);
      if (senderUrl === store.state.testPageUrl) {
        idb.dispatchToStores('setTestPage', { page: message.page });
      }
      break;
    case 'showNextPage':
      showNextPage();
      break;
    case 'pageLoaded':
      let closeWhenDone = false;
      if (senderUrl === store.state.testPageUrl) {
        closeWhenDone = true;
      }
      sendResponse({
        scraper: store.state.scrapers[0],
        closeWhenDone,
      });
      // let tUrl = trimmedUrl(sender.tab.url);
      // if (tUrl === store.state.urlToScrape) {
      //   saveSourcesOfUrl(tUrl, null, 'save');
      // } else if (tUrl === store.state.sourceToScrape) {
      //   saveAsSource(sender.tab, store.state.targetId, tUrl);
      // } else if (sender.tab.id !== store.state.curSuggestionTabId) {
      //   if (sender.tab.active) {
      //     // store.commit(types.SET_CUR_PAGE, {
      //     //   url: sender.tab.url,
      //     // });
      //     // idb.setCurPage(sender.tab.url);
      //     store.commit(types.SET_ACTIVE_TAB_ID, {
      //       tabId: sender.tab.id,
      //     });
      //     await idb.setSkippedLinkIfNew(store.state.targetId, message.link);
      //     await idb.setSkippedSourceIfNew(store.state.targetId, message.link);
      //     await idb.setCurPage(message.link);
      //   }
      // } else {
      //   saveAsSource(sender.tab, store.state.targetId, tUrl);
      // }
      break;
    case 'saveAndGo':
      saveOrSkip(true, 'save');
      break;
    case 'skipAndGo':
      saveOrSkip(true, 'skip');
      break;
    case 'save':
      saveOrSkip(false, 'save');
      break;
    case 'skip':
      saveOrSkip(false, 'skip');
      break;
    case 'go':
      showNextPage(message.profileId);
      break;
    case 'saveAsSource':
      break;
    case 'scrapeSource':
      scrapeSource(message.url);
      break;
  }
});

function scrapeSource(url) {
  console.log('scraping items from ' + url);
  store.commit(types.SET_SOURCE_TO_SCRAPE, url);
  chrome.tabs.create({ url: 'http://' + url, active: false });
}

// Save current tab as a source.
function saveAsSource(tab, profileId, sourceUrl) {
  chrome.tabs.sendMessage(tab.id, { action: 'getLinks' }, getLinksCB);
  idb.updateProfileScrapeDate({
    sourceUrl,
  });
}

async function getLinksCB(links) {
  console.log('received ' + links.length + ' new suggestions for ' + store.state.sourceToScrape + ':\n' + JSON.stringify(links));

  for (let i in links) {
    let link = links[i];
    link.url = trimmedUrl(link.url);
    link.timeAdded = new Date();
    link.saved = true;
    link.profileId = store.state.sourceToScrape;
    idb.addLink(link);
  }

  store.commit(types.SET_SOURCE_TO_SCRAPE, '');
}

function drawRandomElFromObject(object, scoreFn) {
  let sum = 0;
  console.log('DRAWING RANDOM ELEMENT');
  let keys = Object.keys(object);
  let scores = [];
  for (let i = 0; i < keys.length; i++) {
    let key = keys[i];
    let score = scoreFn(object[key]);
    scores.push(score);
    if (score > 0) {
      sum = sum + score;
    }
  }

  if (sum === 0) {
    console.log('Error drawing item from list: no item with any points');
    return;
  }

  let selected = null;
  let selectedInd = -1;

  let draw = Math.random() * sum; // random number between 0 (incl.) and sum (excl.)
  let curSum = 0;
  for (let j = 0; j < keys.length; j++) {
    let score = scores[j];
    if (score > 0) {
      curSum = curSum + score;
      if (curSum > draw && selectedInd === -1) {
        selected = object[[keys[j]]];
        selectedInd = j;
        break;
      }
    }
  }

  for (let k = 0; k < keys.length; k++) {
    let score = scores[k];
    let selText = '  ';
    if (k === selectedInd) {
      selText = '>>';
    }
    let obj = object[keys[k]];
    try {
      console.log(selText + ' ' + score + ' - ' + obj.points + ' - ' + obj.nextScrape + ' - ' + obj.url);
    } catch (err) {
      console.error('ERROR');
    }
  }

  return selected;
}

// eslint-disable-next-line no-unused-vars
function scoreFnHot(src) {
  if (src.points < 1) {
    return 0;
  }

  let now = new Date();
  if (src.nextScrape != null && src.scrapedLinks != null && new Date(src.nextScrape) > now && src.scrapedLinks.length === 0) {
    return 0;
  }

  return src.points / Math.pow((new Date() - new Date(src.lastSaved)) / (1000 * 60 * 60) + 2, 2);
}

function scoreFnJustPoints(src) {
  let p = src.points - 0;
  if (p < 1) {
    return 0;
  }

  // TODO: If source is not due to be scraped, and has no scraped links, return 0.
  // let now = new Date();
  // // eslint-disable-next-line prettier/prettier
  // if (src.nextScrape != null && src.scrapedLinks != null && new Date(src.nextScrape) > now && src.scrapedLinks.length === 0) {
  //   return 0;
  // }

  return p;
}

// Whether or not an array of links contains a particular link
// eslint-disable-next-line no-unused-vars
function arrayContainsLink(array, linkToFind) {
  let urlToFind = trimmedUrl(linkToFind.url);
  for (let i = 0; i < array.length; i++) {
    let link = array[i];
    if (typeof link === 'object') {
      link = link.url;
    }
    if (trimmedUrl(link) === urlToFind) {
      return true;
    }
  }
  return false;
}

// Whether or not an object of links contains a particular link.
// eslint-disable-next-line no-unused-vars
function objContainsLink(links, linkToFind) {
  let urlToFind = trimmedUrl(linkToFind.url);
  return links[urlToFind] != null;
}

// Open URL and get suggestion from it.
// eslint-disable-next-line no-unused-vars
function openUrl(newURL, getSuggestion) {
  console.log('creating new tab: ' + newURL);
  chrome.tabs.create({ url: newURL, active: false }, function(tab) {
    console.log('tab created: ' + newURL);
    store.commit(types.SET_CUR_SUGGESTION_TAB_ID, {
      tabId: tab.id,
    });
  });
}

function changeActiveTabToUrl(newURL) {
  console.log('changing active tab (' + store.state.activeTabId + ') to ' + newURL);
  chrome.tabs.get(store.state.activeTabId, function(activeTab) {
    if (activeTab == null) {
      console.log('no active tab, aborting');
      return;
    }
    store.commit(types.SET_CUR_SUGGESTION, {
      url: trimmedUrl(newURL),
    });
    chrome.tabs.update(activeTab.id, { url: 'http://' + store.state.curSuggestion });
  });
}

// SETTINGS
let scoreFn = scoreFnJustPoints;

idb.loadScrapers();

// // Load scrapers
// import ScraperReddit from './scrapers/reddit.js';

// let reddit = {};
