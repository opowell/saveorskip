import { openDB } from 'idb';
import { resetState } from '../store/index.js';
import { addProfile, addScraper } from './idb.js';
export const DB_NAME = 'saveorskip';

export const STORE_LINKS = 'links';
export const STORE_LINKS_PROFILEID = 'profileId';
export const STORE_LINKS_TIME_ADDED = 'timeAdded';
export const STORE_LINKS_URL = 'url';
export const INDEX_LINKS_PROFILEID = STORE_LINKS_PROFILEID;
export const INDEX_LINKS_PROFILEID_TIMEADDED = STORE_LINKS_PROFILEID + '_' + STORE_LINKS_TIME_ADDED;

export const STORE_PROFILES = 'profiles';
export const INDEX_PROFILES_AUTOGENERATED = 'autoGenerated';
export const FIELD_PROFILES_AUTOGENERATED = 'autoGenerated';

export const STORE_SOURCES = 'sources';
export const STORE_SOURCES_CONSUMERID = 'consumerId'; // The user of links.
export const STORE_SOURCES_PROVIDERID = 'providerId'; // The provider of links.
export const INDEX_SOURCES_CONSUMERID = STORE_SOURCES_CONSUMERID;

export const STORE_SCRAPERS = 'scrapers';

const DB_VERSION = 5;

if (!('indexedDB' in window)) {
  console.log("This browser doesn't support IndexedDB");
}

// When anything below changes, increment DB_VERSION. This forces the database schema to be updated.
export const dbPromise = openDB(DB_NAME, DB_VERSION, {
  async upgrade(db, oldVersion, newVersion, transaction) {
    if (oldVersion === 0) {
      console.log('Creating stores');

      let profilesStore = db.createObjectStore(STORE_PROFILES, {
        keyPath: 'id',
        autoIncrement: true,
      });
      profilesStore.createIndex(INDEX_PROFILES_AUTOGENERATED, FIELD_PROFILES_AUTOGENERATED, {
        unique: false,
      });

      let linksStore = db.createObjectStore(STORE_LINKS, {
        keyPath: [STORE_LINKS_PROFILEID, 'url'],
      });
      linksStore.createIndex('saved', 'saved', { unique: false });
      linksStore.createIndex(INDEX_LINKS_PROFILEID, INDEX_LINKS_PROFILEID, { unique: false });
      linksStore.createIndex(INDEX_LINKS_PROFILEID_TIMEADDED, ['profileId', 'timeScraped']);

      let sourcesStore = db.createObjectStore(STORE_SOURCES, { keyPath: [STORE_SOURCES_CONSUMERID, STORE_SOURCES_PROVIDERID] });
      sourcesStore.createIndex(STORE_SOURCES_CONSUMERID, STORE_SOURCES_CONSUMERID);
      sourcesStore.createIndex('saved', 'saved');
      sourcesStore.createIndex('url', 'url');

      let scrapersStore = db.createObjectStore(STORE_SCRAPERS, {
        keyPath: 'id',
        autoIncrement: true,
      });

      await addProfile({
        name: 'myProfile',
      });

      await addScraper({
        domain: 'www.reddit.com',
        getLinks: `
if (sos.isOverlaidPost()) {
  return links;
}

let linkEls = document.getElementsByClassName('SQnoC3ObvgnGjWt90zD9Z');

for (let i = 0; i < linkEls.length; i++) {
  let linkEl = linkEls[i];

  // Skip sticky posts.
  if (linkEl.parentElement.parentElement.parentElement.querySelector('.icon-sticky')) {
    continue;
  }

  links.push({
    url: 'http://www.reddit.com' + linkEl.getAttribute('href'),
    title: linkEl.text,
  });
}
            `,
        getSources: `
// REDDIT
if (sos.trimmedUrl(window.location.href) !== 'www.reddit.com') {
  sources.push({
    url: 'www.reddit.com',
    points: sos[saveOrSkip].SUGGESTIONS_DOMAIN,
  });
}

// SUBREDDIT
try {
  let subreddit = null;
  let name = sos.getSubredditName();
  subreddit = sos.buildUrl(name);
  sources.push({
    url: subreddit,
    points: sos[saveOrSkip].SUGGESTIONS_SUBREDDIT,
  });
} catch (err) {}

let posterLink = null;
try {
  if (sos.isPost()) {
    // let userEl = document.querySelector('[data-test-id="post-content"] .s1461iz-1');
    let user = sos.getPosterName();
    posterLink = sos.buildUrl(user);
    sources.push({
      url: posterLink,
      points: sos[saveOrSkip].SUGGESTIONS_POSTER,
    });
  }
} catch (err) {}

if (sos.isPost()) {
  try {
    let commenters = document.getElementsByClassName('_23wugcdiaj44hdfugIAlnX');
    console.log('found ' + commenters.length + ' commenters');
    // Skip author and logged-in user.
    let startAt = 2;
    let skipNames = [];
    let numFound = 0;
    skipNames.push(commenters[0].getAttribute('href'));
    skipNames.push(commenters[1].getAttribute('href'));
    for (let i = startAt; i < commenters.length; i++) {
      let commenterLink = sos.buildUrl(commenters[i].getAttribute('href'));
      if (posterLink !== commenterLink && !skipNames.includes(commenters[i].getAttribute('href'))) {
        skipNames.push(commenters[i].getAttribute('href'));
        numFound++;
        sources.push({
          url: commenterLink,
          points: sos[saveOrSkip].SUGGESTIONS_COMMENTER,
        });
        if (numFound >= sos.MAX_COMMENTERS) {
          break;
        }
      }
    }
  } catch (err) {
    console.log(err);
  }
}
            `,
        getSourcesOfLink: `
let sources = [];
let linkEls = document.getElementsByClassName('SQnoC3ObvgnGjWt90zD9Z');
for (let i = 0; i < linkEls; i++) {
  let url = linkEls[i].getAttribute('href');

  if (url == null) {
    debugger;
  }

  if (!url.includes('://')) {
    url = location.host + '/' + sos.trimmedUrl(url);
  } else {
    url = sos.trimmedUrl(url);
  }
  if (targetUrl === url) {
    sources.push({
      url: sos.trimmedUrl(location.href),
      points: sos[saveOrSkip].URL_SOURCE,
    });
    break;
  }
}

console.log('returning sources (' + saveOrSkip + ') of url ' + targetUrl + ':\n' + sos.objJoin(sources, '\n'));

sendResponse(sources);
      `,
        getPageAttributes: `
if (sos.isRegularPost()) {
  out.subreddit = sos.getSubredditName();
  out.poster = sos.getPosterName();
}          
      `,
        onScriptLoad: `
sos.save = {
  SUGGESTIONS_SUBREDDIT: 3,
  SUGGESTIONS_POSTER: 3,
  SUGGESTIONS_COMMENTER: 1,
  SUGGESTIONS_DOMAIN: 1,
  URL_SOURCE: 1,
};
sos.skip = {
  SUGGESTIONS_SUBREDDIT: -2,
  SUGGESTIONS_POSTER: -2,
  SUGGESTIONS_COMMENTER: -1,
  SUGGESTIONS_DOMAIN: 1,
  URL_SOURCE: -1,
};

sos.SUBREDDIT_CLASS = '_19bCWnxeTjqzBElWZfIlJb';

sos.MAX_COMMENTERS = 3;

sos.isOverlaidPost = function() {
  return document.getElementById('overlayScrollContainer') != null;
};

sos.isPageWithLinks = function() {
  return document.getElementsByClassName('rpBJOHq2PR60pnwJlUyP0').length > 0;
};

sos.getSubredditName = function() {
  let name = null;
  if (sos.isOverlaidPost()) {
    let els = document.getElementsByClassName('_3ryJoIoycVkA88fy40qNJc');
    name = els[els.length - 1].getAttribute('href');
  } else {
    name = document.getElementsByClassName('_2D7eYuDY6cYGtybECmsxvE')[0].innerText;
  }
  return name;
};

sos.isRegularPost = function() {
  return document.getElementsByClassName('_2M2wOqmeoPVvcSsJ6Po9-V').length === 1;
};

sos.getPosterName = function() {
  return document.getElementsByClassName('_2tbHP6ZydRpjI44J3syuqC _23wugcdiaj44hdfugIAlnX oQctV4n0yUb0uiHDdGnmE')[0].innerText;
};

sos.isPost = function() {
  return sos.isOverlaidPost() || sos.hasRegularPosts();
};

sos.hasRegularPosts = function() {
  return document.getElementsByClassName('_2D7eYuDY6cYGtybECmsxvE').length > 0;
};

setTimeout(function() {
  sos.finishScraperLoad(scraper, closeWhenDone);
}, 7000);

sos.doFinish = false;

      `,
      });
      // await addScraper({
      //   domain: 'www.theguardian.com',
      // });
      // await addScraper({
      //   domain: 'news.ycombinator.com',
      // });
      // await addScraper({
      //   domain: 'youtube.com',
      // });

      resetState();
    }
  },
});
